import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_without_properties } from "@swc/helpers/_/_object_without_properties";
import React from 'react';
import { appearanceTypes, useIconAppearance } from '../IconAppearanceProvider/IconAppearanceProvider';
import { getDensityBucketAppearanceKey } from './utils/getDensityBucketAppearanceKey';
// https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp
var dppxModifiersMap = {
    mdpi: 1,
    hdpi: 1.5,
    // Должно быть 2, но так как мы пропускаем при генерации hdpi, понижаем это значение.
    // Считаем избыточным генерацию hdpi, xhdpi в использовании для hdpi не сильно шакалится.
    xhdpi: 1.5,
    xxhdpi: 3,
    xxxhdpi: 4
};
var densityBucketTypes = Object.keys(dppxModifiersMap);
var RasterIcon = /*#__PURE__*/ React.memo(function RasterIcon(_param) {
    var getRootRef = _param.getRootRef, id = _param.id, size = _param.size, className = _param.className, restProps = _object_without_properties(_param, [
        "getRootRef",
        "id",
        "size",
        "className"
    ]);
    var appearance = useIconAppearance();
    var srcSet = densityBucketTypes.reduce(function(set, densityBucket) {
        var densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);
        var src = restProps[densityAppearanceKey];
        delete restProps[densityAppearanceKey];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = appearanceTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var appearance1 = _step.value;
                var densityAppearanceKey1 = getDensityBucketAppearanceKey(appearance1, densityBucket);
                if (!src) {
                    src = restProps[densityAppearanceKey1];
                }
                delete restProps[densityAppearanceKey1];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        if (src) {
            set.push("".concat(src, " ").concat(dppxModifiersMap[densityBucket], "x"));
        }
        return set;
    }, []).join(', ');
    return /*#__PURE__*/ React.createElement("img", _object_spread({
        ref: getRootRef,
        "aria-hidden": "true",
        alt: "",
        className: [
            'vkuiIcon',
            "vkuiIcon--".concat(size),
            "vkuiIcon--w-".concat(size),
            "vkuiIcon--h-".concat(size),
            "vkuiIcon--".concat(id),
            'vkuiRasterIcon',
            className
        ].join(' ').trim(),
        width: size,
        height: size,
        srcSet: srcSet,
        loading: "lazy",
        draggable: false
    }, restProps));
});
export function makeRasterIcon(componentName, id, size, densityBucketAppearanceSet) {
    var Icon = function(props) {
        return /*#__PURE__*/ React.createElement(RasterIcon, _object_spread({
            id: id,
            size: size
        }, densityBucketAppearanceSet, props));
    };
    Icon.size = size;
    Icon.isRasterIcon = true;
    Icon.displayName = componentName;
    return Icon;
}

//# sourceMappingURL=RasterIcon.js.map