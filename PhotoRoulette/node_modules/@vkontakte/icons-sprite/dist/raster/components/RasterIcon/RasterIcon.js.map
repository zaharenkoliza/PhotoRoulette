{"version":3,"sources":["../../../../src/raster/components/RasterIcon/RasterIcon.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  appearanceTypes,\n  useIconAppearance,\n} from '../IconAppearanceProvider/IconAppearanceProvider';\nimport type { DensityBucketAppearanceSet, DensityBucketType } from './types';\nimport { getDensityBucketAppearanceKey } from './utils/getDensityBucketAppearanceKey';\n\ninterface RasterIconBaseProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  getRootRef?: React.Ref<HTMLImageElement>;\n}\n\ninterface RasterIconInternalProps extends DensityBucketAppearanceSet {\n  id: string;\n  size: number;\n}\n\ntype RasterIconProps = RasterIconInternalProps & RasterIconBaseProps;\n\n// https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp\nconst dppxModifiersMap: Record<DensityBucketType, number> = {\n  mdpi: 1,\n  hdpi: 1.5,\n  // Должно быть 2, но так как мы пропускаем при генерации hdpi, понижаем это значение.\n  // Считаем избыточным генерацию hdpi, xhdpi в использовании для hdpi не сильно шакалится.\n  xhdpi: 1.5,\n  xxhdpi: 3,\n  xxxhdpi: 4,\n};\n\nconst densityBucketTypes = Object.keys(dppxModifiersMap) as DensityBucketType[];\n\nconst RasterIcon = React.memo(function RasterIcon({\n  getRootRef,\n  id,\n  size,\n  className,\n  ...restProps\n}: RasterIconProps) {\n  const appearance = useIconAppearance();\n\n  const srcSet = densityBucketTypes\n    .reduce<string[]>((set, densityBucket) => {\n      const densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);\n      let src = restProps[densityAppearanceKey];\n      delete restProps[densityAppearanceKey];\n\n      for (const appearance of appearanceTypes) {\n        const densityAppearanceKey = getDensityBucketAppearanceKey(appearance, densityBucket);\n        if (!src) {\n          src = restProps[densityAppearanceKey];\n        }\n\n        delete restProps[densityAppearanceKey];\n      }\n\n      if (src) {\n        set.push(`${src} ${dppxModifiersMap[densityBucket]}x`);\n      }\n\n      return set;\n    }, [])\n    .join(', ');\n\n  return (\n    <img\n      ref={getRootRef}\n      aria-hidden=\"true\"\n      alt=\"\"\n      className={[\n        'vkuiIcon',\n        `vkuiIcon--${size}`,\n        `vkuiIcon--w-${size}`,\n        `vkuiIcon--h-${size}`,\n        `vkuiIcon--${id}`,\n        'vkuiRasterIcon',\n        className,\n      ]\n        .join(' ')\n        .trim()}\n      width={size}\n      height={size}\n      srcSet={srcSet}\n      loading=\"lazy\"\n      draggable={false}\n      {...restProps}\n    />\n  );\n});\n\nexport function makeRasterIcon<Props extends RasterIconBaseProps>(\n  componentName: string,\n  id: string,\n  size: number,\n  densityBucketAppearanceSet: DensityBucketAppearanceSet,\n): React.FC<Props> {\n  const Icon = (props: Props): JSX.Element => {\n    return <RasterIcon id={id} size={size} {...densityBucketAppearanceSet} {...props} />;\n  };\n\n  Icon.size = size;\n  Icon.isRasterIcon = true;\n  Icon.displayName = componentName;\n\n  return Icon;\n}\n"],"names":["React","appearanceTypes","useIconAppearance","getDensityBucketAppearanceKey","dppxModifiersMap","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","densityBucketTypes","Object","keys","RasterIcon","memo","getRootRef","id","size","className","restProps","appearance","srcSet","reduce","set","densityBucket","densityAppearanceKey","src","push","join","img","ref","aria-hidden","alt","trim","width","height","loading","draggable","makeRasterIcon","componentName","densityBucketAppearanceSet","Icon","props","isRasterIcon","displayName"],"mappings":";;AAAA,OAAOA,WAAW,QAAQ;AAC1B,SACEC,eAAe,EACfC,iBAAiB,QACZ,mDAAmD;AAE1D,SAASC,6BAA6B,QAAQ,wCAAwC;AAatF,uFAAuF;AACvF,IAAMC,mBAAsD;IAC1DC,MAAM;IACNC,MAAM;IACN,qFAAqF;IACrF,yFAAyF;IACzFC,OAAO;IACPC,QAAQ;IACRC,SAAS;AACX;AAEA,IAAMC,qBAAqBC,OAAOC,IAAI,CAACR;AAEvC,IAAMS,2BAAab,MAAMc,IAAI,CAAC,SAASD,WAAW;QAChDE,aADgD,OAChDA,YACAC,KAFgD,OAEhDA,IACAC,OAHgD,OAGhDA,MACAC,YAJgD,OAIhDA,WACGC,uCAL6C;QAChDJ;QACAC;QACAC;QACAC;;IAGA,IAAME,aAAalB;IAEnB,IAAMmB,SAASX,mBACZY,MAAM,CAAW,SAACC,KAAKC;QACtB,IAAMC,uBAAuBtB,8BAA8BiB,YAAYI;QACvE,IAAIE,MAAMP,SAAS,CAACM,qBAAqB;QACzC,OAAON,SAAS,CAACM,qBAAqB;YAEjC,kCAAA,2BAAA;;YAAL,QAAK,YAAoBxB,oCAApB,SAAA,6BAAA,QAAA,yBAAA,iCAAqC;gBAArC,IAAMmB,cAAN;gBACH,IAAMK,wBAAuBtB,8BAA8BiB,aAAYI;gBACvE,IAAI,CAACE,KAAK;oBACRA,MAAMP,SAAS,CAACM,sBAAqB;gBACvC;gBAEA,OAAON,SAAS,CAACM,sBAAqB;YACxC;;YAPK;YAAA;;;qBAAA,6BAAA;oBAAA;;;oBAAA;0BAAA;;;;QASL,IAAIC,KAAK;YACPH,IAAII,IAAI,CAAC,AAAC,GAASvB,OAAPsB,KAAI,KAAmC,OAAhCtB,gBAAgB,CAACoB,cAAc,EAAC;QACrD;QAEA,OAAOD;IACT,GAAG,EAAE,EACJK,IAAI,CAAC;IAER,qBACE,oBAACC;QACCC,KAAKf;QACLgB,eAAY;QACZC,KAAI;QACJd,WAAW;YACT;YACC,aAAiB,OAALD;YACZ,eAAmB,OAALA;YACd,eAAmB,OAALA;YACd,aAAe,OAAHD;YACb;YACAE;SACD,CACEU,IAAI,CAAC,KACLK,IAAI;QACPC,OAAOjB;QACPkB,QAAQlB;QACRI,QAAQA;QACRe,SAAQ;QACRC,WAAW;OACPlB;AAGV;AAEA,OAAO,SAASmB,eACdC,aAAqB,EACrBvB,EAAU,EACVC,IAAY,EACZuB,0BAAsD;IAEtD,IAAMC,OAAO,SAACC;QACZ,qBAAO,oBAAC7B;YAAWG,IAAIA;YAAIC,MAAMA;WAAUuB,4BAAgCE;IAC7E;IAEAD,KAAKxB,IAAI,GAAGA;IACZwB,KAAKE,YAAY,GAAG;IACpBF,KAAKG,WAAW,GAAGL;IAEnB,OAAOE;AACT"}