{"version":3,"sources":["../../../../src/lib/touch/UIPanGestureRecognizer.ts"],"sourcesContent":["import { getFirstTouchEventData } from '../dom';\n\nexport type VCoords = { x: number; y: number };\n\nconst DEFAULT_INITIAL_TIME = 0;\nconst MILLISECONDS = 1000;\n\n/**\n * JS имплементация класса из UIKIt iOS.\n *\n * https://developer.apple.com/documentation/uikit/uipangesturerecognizer\n */\nexport class UIPanGestureRecognizer {\n  private initialTime = DEFAULT_INITIAL_TIME;\n  x1 = 0;\n  y1 = 0;\n  x2 = 0;\n  y2 = 0;\n\n  setInitialTimeOnce(): void {\n    if (this.initialTime === DEFAULT_INITIAL_TIME) {\n      this.initialTime = Date.now();\n    }\n  }\n\n  setStartCoords(event: UIEvent): void {\n    const { clientX, clientY } = getFirstTouchEventData(event);\n    this.x1 = clientX;\n    this.y1 = clientY;\n  }\n\n  setEndCoords(event: UIEvent): void {\n    const { clientX, clientY } = getFirstTouchEventData(event);\n    this.x2 = clientX;\n    this.y2 = clientY;\n  }\n\n  delta(): {\n    x: number;\n    y: number;\n  } {\n    return {\n      x: this.x2 - this.x1,\n      y: this.y2 - this.y1,\n    };\n  }\n\n  distance(): number {\n    const { x, y } = this.delta();\n    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n  }\n\n  velocity(): {\n    x: number;\n    y: number;\n  } {\n    const deltaTime = (Date.now() - this.initialTime) / MILLISECONDS;\n\n    if (deltaTime <= 0) {\n      return { x: 0, y: 0 };\n    }\n\n    const { x, y } = this.delta();\n    return { x: x / deltaTime, y: y / deltaTime };\n  }\n\n  angle(): number {\n    const deltaX = this.x2 - this.x1;\n    const deltaY = this.y2 - this.y1;\n    const radians = Math.atan2(deltaY, deltaX);\n    const degrees = (radians * 180) / Math.PI;\n    return degrees < 0 ? 360 + degrees : degrees;\n  }\n\n  reset(): void {\n    this.initialTime = DEFAULT_INITIAL_TIME;\n    this.x1 = this.y1 = 0;\n    this.x2 = this.y2 = 0;\n  }\n}\n"],"names":["getFirstTouchEventData","DEFAULT_INITIAL_TIME","MILLISECONDS","UIPanGestureRecognizer","initialTime","x1","y1","x2","y2","setInitialTimeOnce","Date","now","setStartCoords","event","clientX","clientY","setEndCoords","delta","x","y","distance","Math","sqrt","pow","velocity","deltaTime","angle","deltaX","deltaY","radians","atan2","degrees","PI","reset"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,SAAS;AAIhD,MAAMC,uBAAuB;AAC7B,MAAMC,eAAe;AAErB;;;;CAIC,GACD,OAAO,MAAMC;IACHC,cAAcH,qBAAqB;IAC3CI,KAAK,EAAE;IACPC,KAAK,EAAE;IACPC,KAAK,EAAE;IACPC,KAAK,EAAE;IAEPC,qBAA2B;QACzB,IAAI,IAAI,CAACL,WAAW,KAAKH,sBAAsB;YAC7C,IAAI,CAACG,WAAW,GAAGM,KAAKC,GAAG;QAC7B;IACF;IAEAC,eAAeC,KAAc,EAAQ;QACnC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAAGf,uBAAuBa;QACpD,IAAI,CAACR,EAAE,GAAGS;QACV,IAAI,CAACR,EAAE,GAAGS;IACZ;IAEAC,aAAaH,KAAc,EAAQ;QACjC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAAGf,uBAAuBa;QACpD,IAAI,CAACN,EAAE,GAAGO;QACV,IAAI,CAACN,EAAE,GAAGO;IACZ;IAEAE,QAGE;QACA,OAAO;YACLC,GAAG,IAAI,CAACX,EAAE,GAAG,IAAI,CAACF,EAAE;YACpBc,GAAG,IAAI,CAACX,EAAE,GAAG,IAAI,CAACF,EAAE;QACtB;IACF;IAEAc,WAAmB;QACjB,MAAM,EAAEF,CAAC,EAAEC,CAAC,EAAE,GAAG,IAAI,CAACF,KAAK;QAC3B,OAAOI,KAAKC,IAAI,CAACD,KAAKE,GAAG,CAACL,GAAG,KAAKG,KAAKE,GAAG,CAACJ,GAAG;IAChD;IAEAK,WAGE;QACA,MAAMC,YAAY,AAACf,CAAAA,KAAKC,GAAG,KAAK,IAAI,CAACP,WAAW,AAAD,IAAKF;QAEpD,IAAIuB,aAAa,GAAG;YAClB,OAAO;gBAAEP,GAAG;gBAAGC,GAAG;YAAE;QACtB;QAEA,MAAM,EAAED,CAAC,EAAEC,CAAC,EAAE,GAAG,IAAI,CAACF,KAAK;QAC3B,OAAO;YAAEC,GAAGA,IAAIO;YAAWN,GAAGA,IAAIM;QAAU;IAC9C;IAEAC,QAAgB;QACd,MAAMC,SAAS,IAAI,CAACpB,EAAE,GAAG,IAAI,CAACF,EAAE;QAChC,MAAMuB,SAAS,IAAI,CAACpB,EAAE,GAAG,IAAI,CAACF,EAAE;QAChC,MAAMuB,UAAUR,KAAKS,KAAK,CAACF,QAAQD;QACnC,MAAMI,UAAU,AAACF,UAAU,MAAOR,KAAKW,EAAE;QACzC,OAAOD,UAAU,IAAI,MAAMA,UAAUA;IACvC;IAEAE,QAAc;QACZ,IAAI,CAAC7B,WAAW,GAAGH;QACnB,IAAI,CAACI,EAAE,GAAG,IAAI,CAACC,EAAE,GAAG;QACpB,IAAI,CAACC,EAAE,GAAG,IAAI,CAACC,EAAE,GAAG;IACtB;AACF"}