{"version":3,"sources":["../../../../src/components/CustomScrollView/useTrackerVisibility.ts"],"sourcesContent":["import * as React from 'react';\nimport type { TimeoutId } from '../../types';\n\n/**\n * 'temporary-visible' – \"планирует\" скрытие ползунка через N миллисекунд. Если тайм-аут не успеет\n * сработать, то каждый последующий вызов функции будет откладывать скрытие ползунка.\n */\ntype VisibilityState = 'visible' | 'hidden' | 'temporary-visible';\n\n/**\n * Хук, который позволяет управлять видимостью ползунка скроллбара.\n * @param autoHideScrollbar - скрывать ли ползунок скроллбара\n * @param autoHideScrollbarDelay - через какое кол-во миллисекунд ползунок скроллбара скрывается\n * @returns Объект, содержащий параметры, которые позволяют управлять видимостью ползунка\n */\nexport const useTrackerVisibility = (\n  autoHideScrollbar = false,\n  autoHideScrollbarDelay = 500,\n): TrackerVisibilityProps => {\n  const [visibility, setVisibility] = React.useState<VisibilityState>(\n    autoHideScrollbar ? 'hidden' : 'visible',\n  );\n  const isMouseOver = React.useRef(false);\n  const isTrackerDragging = React.useRef(false);\n\n  React.useEffect(() => {\n    setVisibility(autoHideScrollbar ? 'hidden' : 'visible');\n  }, [autoHideScrollbar]);\n\n  const onTrackerDragStart = React.useCallback(() => {\n    isTrackerDragging.current = true;\n    setVisibility('visible');\n  }, []);\n\n  const onTrackerDragStop = React.useCallback(() => {\n    isTrackerDragging.current = false;\n    if (!isMouseOver.current) {\n      setVisibility('temporary-visible');\n    }\n  }, []);\n\n  const onTrackerMouseEnter = React.useCallback(() => {\n    isMouseOver.current = true;\n    setVisibility('visible');\n  }, []);\n\n  const onTrackerMouseLeave = React.useCallback(() => {\n    isMouseOver.current = false;\n    if (!isTrackerDragging.current) {\n      setVisibility('temporary-visible');\n    }\n  }, []);\n\n  const onTargetScroll = React.useCallback(() => {\n    if (isMouseOver.current || isTrackerDragging.current) {\n      return;\n    }\n    setVisibility('temporary-visible');\n  }, []);\n\n  React.useEffect(\n    function hideAfterDelay() {\n      let timeoutId: TimeoutId = null;\n\n      if (visibility === 'temporary-visible') {\n        timeoutId = setTimeout(() => {\n          setVisibility('hidden');\n        }, autoHideScrollbarDelay);\n      }\n\n      return function clearHideAfterDelay() {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n      };\n    },\n    [visibility, autoHideScrollbarDelay],\n  );\n\n  return {\n    trackerVisible: visibility !== 'hidden',\n    onTrackerDragStart,\n    onTrackerDragStop,\n    onTrackerMouseEnter,\n    onTrackerMouseLeave,\n    onTargetScroll,\n  };\n};\n\nexport interface TrackerOptionsProps {\n  /**\n   * Скрывать ли ползунок скроллбара\n   */\n  autoHideScrollbar?: boolean;\n  /**\n   * Через какое кол-во миллисекунд ползунок скроллбара скрывается\n   */\n  autoHideScrollbarDelay?: number;\n}\n\nexport interface TrackerVisibilityProps {\n  /**\n   * Отвечает за видимость ползунка\n   */\n  trackerVisible: boolean;\n  /**\n   * Функция для обработки события у блока со скроллом\n   */\n  onTargetScroll: (this: void) => void;\n  /**\n   * Функция для обработки начала drag event ползунка\n   */\n  onTrackerDragStart: (this: void) => void;\n  /**\n   * Функция для обработки окончания drag event ползунка\n   */\n  onTrackerDragStop: (this: void) => void;\n  /**\n   * Функция для обработки mouseLeave event ползунка\n   */\n  onTrackerMouseEnter: (this: void) => void;\n  /**\n   * Функция для обработки mouseEnter event ползунка\n   */\n  onTrackerMouseLeave: (this: void) => void;\n}\n"],"names":["useTrackerVisibility","autoHideScrollbar","autoHideScrollbarDelay","visibility","setVisibility","React","useState","isMouseOver","useRef","isTrackerDragging","useEffect","onTrackerDragStart","useCallback","current","onTrackerDragStop","onTrackerMouseEnter","onTrackerMouseLeave","onTargetScroll","hideAfterDelay","timeoutId","setTimeout","clearHideAfterDelay","clearTimeout","trackerVisible"],"mappings":";;;;+BAeaA;;;eAAAA;;;;iEAfU;AAehB,MAAMA,uBAAuB,CAClCC,oBAAoB,KAAK,EACzBC,yBAAyB,GAAG;IAE5B,MAAM,CAACC,YAAYC,cAAc,GAAGC,OAAMC,QAAQ,CAChDL,oBAAoB,WAAW;IAEjC,MAAMM,cAAcF,OAAMG,MAAM,CAAC;IACjC,MAAMC,oBAAoBJ,OAAMG,MAAM,CAAC;IAEvCH,OAAMK,SAAS,CAAC;QACdN,cAAcH,oBAAoB,WAAW;IAC/C,GAAG;QAACA;KAAkB;IAEtB,MAAMU,qBAAqBN,OAAMO,WAAW,CAAC;QAC3CH,kBAAkBI,OAAO,GAAG;QAC5BT,cAAc;IAChB,GAAG,EAAE;IAEL,MAAMU,oBAAoBT,OAAMO,WAAW,CAAC;QAC1CH,kBAAkBI,OAAO,GAAG;QAC5B,IAAI,CAACN,YAAYM,OAAO,EAAE;YACxBT,cAAc;QAChB;IACF,GAAG,EAAE;IAEL,MAAMW,sBAAsBV,OAAMO,WAAW,CAAC;QAC5CL,YAAYM,OAAO,GAAG;QACtBT,cAAc;IAChB,GAAG,EAAE;IAEL,MAAMY,sBAAsBX,OAAMO,WAAW,CAAC;QAC5CL,YAAYM,OAAO,GAAG;QACtB,IAAI,CAACJ,kBAAkBI,OAAO,EAAE;YAC9BT,cAAc;QAChB;IACF,GAAG,EAAE;IAEL,MAAMa,iBAAiBZ,OAAMO,WAAW,CAAC;QACvC,IAAIL,YAAYM,OAAO,IAAIJ,kBAAkBI,OAAO,EAAE;YACpD;QACF;QACAT,cAAc;IAChB,GAAG,EAAE;IAELC,OAAMK,SAAS,CACb,SAASQ;QACP,IAAIC,YAAuB;QAE3B,IAAIhB,eAAe,qBAAqB;YACtCgB,YAAYC,WAAW;gBACrBhB,cAAc;YAChB,GAAGF;QACL;QAEA,OAAO,SAASmB;YACd,IAAIF,WAAW;gBACbG,aAAaH;YACf;QACF;IACF,GACA;QAAChB;QAAYD;KAAuB;IAGtC,OAAO;QACLqB,gBAAgBpB,eAAe;QAC/BQ;QACAG;QACAC;QACAC;QACAC;IACF;AACF"}