import * as React from 'react';
import { type FilterFn } from '../../lib/select';
import type { TrackerOptionsProps } from '../CustomScrollView/useTrackerVisibility';
import { type CustomSelectDropdownProps } from '../CustomSelectDropdown/CustomSelectDropdown';
import type { FormFieldProps } from '../FormField/FormField';
import type { NativeSelectProps } from '../NativeSelect/NativeSelect';
import type { SelectType } from '../Select/Select';
import { type CustomSelectClearButtonProps } from './CustomSelectClearButton';
import type { CustomSelectOptionInterface, CustomSelectRenderOption } from './types';
export type { CustomSelectClearButtonProps, CustomSelectOptionInterface, CustomSelectRenderOption };
export interface SelectProps<OptionInterfaceT extends CustomSelectOptionInterface = CustomSelectOptionInterface> extends NativeSelectProps, Omit<FormFieldProps, 'maxHeight'>, TrackerOptionsProps, Pick<CustomSelectDropdownProps, 'overscrollBehavior' | 'autoHideScrollbar' | 'autoHideScrollbarDelay'> {
    /**
     * ref на внутрений компонент input
     */
    getSelectInputRef?: React.Ref<HTMLInputElement>;
    /**
     * Если `true`, то при клике на `CustomSelect` в нём появится текстовое поле для поиска по `options`. По умолчанию поиск
     * производится по `option.label`.
     */
    searchable?: boolean;
    /**
     * Текст, который будет отображен, если приходит пустой `options`.
     */
    emptyText?: string;
    /**
     * Событие изменения текстового поля
     */
    onInputChange?: (e: React.ChangeEvent) => void;
    options: OptionInterfaceT[];
    /**
     * Функция для кастомной фильтрации. По умолчанию поиск производится по `option.label`.
     */
    filterFn?: false | FilterFn<OptionInterfaceT>;
    popupDirection?: 'top' | 'bottom';
    /**
     * Рендер-проп для кастомного рендера опции.
     * В объекте аргумента приходят [свойства опции](https://vkcom.github.io/VKUI/#/CustomSelectOption?id=props)
     *
     * > ⚠️  Важно: cвойство опции `disabled` должно выставляться только через проп `options`.
     * > Запрещается выставлять `disabled` проп опциям в обход `options`, иначе `CustomSelect` не будет знать об актуальном состоянии
     * опции.
     */
    renderOption?: (props: CustomSelectRenderOption<OptionInterfaceT>) => React.ReactNode;
    /**
     * Рендер-проп для кастомного рендера содержимого дропдауна.
     * В `defaultDropdownContent` содержится список опций в виде скроллящегося блока.
     */
    renderDropdown?: ({ defaultDropdownContent, }: {
        defaultDropdownContent: React.ReactNode;
    }) => React.ReactNode;
    /**
     * Если `true`, то в дропдауне вместо списка опций рисуется спиннер. При переданных `renderDropdown` и `fetching: true`
     * "победит" `renderDropdown`.
     */
    fetching?: boolean;
    onClose?: VoidFunction;
    onOpen?: VoidFunction;
    /**
     * Иконка раскрывающегося списка
     */
    icon?: React.ReactNode;
    /**
     * Кастомная кнопка для очистки значения.
     * Должна принимать обязательное свойство `onClick`
     */
    ClearButton?: React.ComponentType<CustomSelectClearButtonProps>;
    /**
     * Если `true`, то справа будет отображаться кнопка для очистки значения
     */
    allowClearButton?: boolean;
    /**
     * (e2e) testId кнопки очистки
     */
    clearButtonTestId?: string;
    /**
     * Отступ от выпадающего списка
     */
    dropdownOffsetDistance?: number;
    /**
     * Ширина раскрывающегося списка зависит от контента
     */
    dropdownAutoWidth?: boolean;
    forceDropdownPortal?: boolean;
    selectType?: SelectType;
    /**
     * Отключает максимальную высоту по умолчанию
     */
    noMaxHeight?: boolean;
    /**
     * (e2e) testId элемента, внутри которого отображается текст выбранной опции `CustomSelect` или плейсхолдер.
     */
    labelTextTestId?: string;
    nativeSelectTestId?: string;
}
/**
 * @see https://vkcom.github.io/VKUI/#/CustomSelect
 */
export declare function CustomSelect<OptionInterfaceT extends CustomSelectOptionInterface>(props: SelectProps<OptionInterfaceT>): React.ReactNode;
//# sourceMappingURL=CustomSelect.d.ts.map