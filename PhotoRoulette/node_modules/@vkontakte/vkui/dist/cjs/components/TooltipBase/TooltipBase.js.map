{"version":3,"sources":["../../../../src/components/TooltipBase/TooltipBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon16Cancel } from '@vkontakte/icons';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport type { HTMLAttributesWithRootRef } from '../../types';\nimport { DefaultIcon } from '../FloatingArrow/DefaultIcon';\nimport { FloatingArrow, type FloatingArrowProps } from '../FloatingArrow/FloatingArrow';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Subhead } from '../Typography/Subhead/Subhead';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden';\nimport styles from './TooltipBase.module.css';\n\nexport const TOOLTIP_MAX_WIDTH = 220;\n\nconst stylesAppearance = {\n  accent: styles['TooltipBase--appearance-accent'],\n  white: styles['TooltipBase--appearance-white'],\n  black: styles['TooltipBase--appearance-black'],\n  inversion: styles['TooltipBase--appearance-inversion'],\n};\n\nexport interface TooltipBaseProps\n  extends Omit<HTMLAttributesWithRootRef<HTMLDivElement>, 'children'> {\n  /**\n   * Стиль отображения подсказки\n   */\n  appearance?: 'accent' | 'neutral' | 'white' | 'black' | 'inversion';\n  /**\n   * Текст тултипа.\n   */\n  text?: React.ReactNode;\n  /**\n   * Заголовок тултипа.\n   */\n  header?: React.ReactNode;\n  /**\n   * Для показа указателя, требуется передать хотя бы `coords` и `placement`.\n   */\n  arrowProps?: Omit<FloatingArrowProps, 'Icon'>;\n  /**\n   * Пользовательская SVG иконка.\n   *\n   * Требования:\n   *\n   * 1. Иконка по умолчанию должна быть направлена вверх (a.k.a `IconUp`).\n   * 2. Чтобы избежать проблемы с пространством между стрелкой и контентом на некоторых экранах,\n   *    растяните кривую по высоте на `1px` и увеличьте на этот размер `height` и `viewBox` SVG.\n   *    (см. https://github.com/VKCOM/VKUI/pull/4496).\n   * 3. Убедитесь, что компонент принимает все валидные для SVG параметры.\n   * 4. Убедитесь, что SVG и её элементы наследует цвет через `fill=\"currentColor\"`.\n   * 5. Если стрелка наезжает на якорный элемент, то увеличьте смещение между целевым и всплывающим элементами.\n   */\n  ArrowIcon?: FloatingArrowProps['Icon'];\n  /**\n   * Пользовательские css-классы, будут добавлены на root-элемент\n   */\n  className?: string;\n  /**\n   * Перебивает максимальную ширину заданную по умолчанию.\n   *\n   * Передача `null` полностью сбрасывает установку `max-width` на элемент.\n   */\n  maxWidth?: number | string | null;\n  /**\n   * Скрытый текст для кнопки закрытия.\n   */\n  closeIconLabel?: string;\n  /**\n   * Обработчик нажатия на кнопку закрытия. При передаче, показывается иконка.\n   */\n  onCloseIconClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\n/**\n * Низкоуровневый компонент для отрисовки тултипа.\n * Примеры использования и Readme можно найти в документации Tooltip\n * @see https://vkcom.github.io/VKUI/#/Tooltip\n * @private\n */\nexport const TooltipBase = ({\n  appearance = 'accent',\n  arrowProps,\n  ArrowIcon = DefaultIcon,\n  text,\n  header,\n  maxWidth = TOOLTIP_MAX_WIDTH,\n  closeIconLabel = 'Закрыть',\n  onCloseIconClick,\n  className,\n  ...restProps\n}: TooltipBaseProps): React.ReactNode => {\n  return (\n    <RootComponent\n      {...restProps}\n      baseClassName={classNames(\n        styles['TooltipBase'],\n        appearance !== 'neutral' && stylesAppearance[appearance],\n        className,\n      )}\n      role=\"tooltip\"\n    >\n      {arrowProps && (\n        <FloatingArrow\n          {...arrowProps}\n          iconClassName={classNames(styles['TooltipBase__arrow'], arrowProps.iconClassName)}\n          Icon={ArrowIcon}\n        />\n      )}\n      <div\n        className={styles['TooltipBase__content']}\n        style={maxWidth !== null ? { maxWidth } : undefined}\n      >\n        <div>\n          {hasReactNode(header) && <Subhead weight=\"2\">{header}</Subhead>}\n          {hasReactNode(text) && <Subhead>{text}</Subhead>}\n        </div>\n        {typeof onCloseIconClick === 'function' && (\n          <Tappable\n            Component=\"button\"\n            className={styles['TooltipBase__closeButton']}\n            hoverMode=\"opacity\"\n            activeMode=\"opacity\"\n            onClick={onCloseIconClick}\n          >\n            <VisuallyHidden>{closeIconLabel}</VisuallyHidden>\n            <Icon16Cancel display=\"block\" />\n          </Tappable>\n        )}\n      </div>\n    </RootComponent>\n  );\n};\n"],"names":["TOOLTIP_MAX_WIDTH","TooltipBase","stylesAppearance","accent","white","black","inversion","appearance","arrowProps","ArrowIcon","DefaultIcon","text","header","maxWidth","closeIconLabel","onCloseIconClick","className","restProps","RootComponent","baseClassName","classNames","role","FloatingArrow","iconClassName","Icon","div","style","undefined","hasReactNode","Subhead","weight","Tappable","Component","hoverMode","activeMode","onClick","VisuallyHidden","Icon16Cancel","display"],"mappings":";;;;;;;;;;;IAYaA,iBAAiB;eAAjBA;;IAmEAC,WAAW;eAAXA;;;;;;;;iEA/EU;uBACM;sBACY;6BAEb;+BAC2B;+BACzB;0BACL;yBACD;gCACO;AAGxB,MAAMD,oBAAoB;AAEjC,MAAME,mBAAmB;IACvBC,MAAM;IACNC,KAAK;IACLC,KAAK;IACLC,SAAS;AACX;AA4DO,MAAML,cAAc;QAAC,EAC1BM,aAAa,QAAQ,EACrBC,UAAU,EACVC,YAAYC,wBAAW,EACvBC,IAAI,EACJC,MAAM,EACNC,WAAWb,iBAAiB,EAC5Bc,iBAAiB,SAAS,EAC1BC,gBAAgB,EAChBC,SAAS,EAEQ,WADdC;QATHV;QACAC;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,qBACE,sBAACE,4BAAa,8CACRD;QACJE,eAAeC,IAAAA,gBAAU,qBAEvBb,eAAe,aAAaL,gBAAgB,CAACK,WAAW,EACxDS;QAEFK,MAAK;;YAEJb,4BACC,qBAACc,4BAAa,8CACRd;gBACJe,eAAeH,IAAAA,gBAAU,4BAA+BZ,WAAWe,aAAa;gBAChFC,MAAMf;;0BAGV,sBAACgB;gBACCT,SAAS;gBACTU,OAAOb,aAAa,OAAO;oBAAEA;gBAAS,IAAIc;;kCAE1C,sBAACF;;4BACEG,IAAAA,kBAAY,EAAChB,yBAAW,qBAACiB,gBAAO;gCAACC,QAAO;0CAAKlB;;4BAC7CgB,IAAAA,kBAAY,EAACjB,uBAAS,qBAACkB,gBAAO;0CAAElB;;;;oBAElC,OAAOI,qBAAqB,4BAC3B,sBAACgB,kBAAQ;wBACPC,WAAU;wBACVhB,SAAS;wBACTiB,WAAU;wBACVC,YAAW;wBACXC,SAASpB;;0CAET,qBAACqB,8BAAc;0CAAEtB;;0CACjB,qBAACuB,mBAAY;gCAACC,SAAQ;;;;;;;;AAMlC"}