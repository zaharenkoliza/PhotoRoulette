{"version":3,"sources":["../../../../src/components/Textarea/useResizeTextarea.ts"],"sourcesContent":["import * as React from 'react';\n\nexport function useResizeTextarea(\n  onResize: ((el: HTMLTextAreaElement) => void) | undefined,\n  grow: boolean,\n): readonly [React.RefObject<HTMLTextAreaElement>, () => void] {\n  const elementRef = React.useRef<HTMLTextAreaElement>(null);\n  const currentScrollHeight = React.useRef<number>();\n\n  const resizeElement = React.useCallback(\n    (el: HTMLTextAreaElement) => {\n      if (grow && el.offsetParent) {\n        el.style.height = '';\n        el.style.height = `${el.scrollHeight}px`;\n\n        if (el.scrollHeight !== currentScrollHeight.current && onResize) {\n          onResize(el);\n          currentScrollHeight.current = el.scrollHeight;\n        }\n      }\n    },\n    [grow, onResize],\n  );\n\n  const resize = React.useCallback(() => {\n    const el = elementRef.current;\n    if (!el) {\n      /* istanbul ignore next: нет возможности воспроизвести */\n      return;\n    }\n\n    resizeElement(el);\n  }, [elementRef, resizeElement]);\n\n  return [elementRef, resize];\n}\n"],"names":["useResizeTextarea","onResize","grow","elementRef","React","useRef","currentScrollHeight","resizeElement","useCallback","el","offsetParent","style","height","scrollHeight","current","resize"],"mappings":";;;;+BAEgBA;;;eAAAA;;;;iEAFO;AAEhB,SAASA,kBACdC,QAAyD,EACzDC,IAAa;IAEb,MAAMC,aAAaC,OAAMC,MAAM,CAAsB;IACrD,MAAMC,sBAAsBF,OAAMC,MAAM;IAExC,MAAME,gBAAgBH,OAAMI,WAAW,CACrC,CAACC;QACC,IAAIP,QAAQO,GAAGC,YAAY,EAAE;YAC3BD,GAAGE,KAAK,CAACC,MAAM,GAAG;YAClBH,GAAGE,KAAK,CAACC,MAAM,GAAG,CAAC,EAAEH,GAAGI,YAAY,CAAC,EAAE,CAAC;YAExC,IAAIJ,GAAGI,YAAY,KAAKP,oBAAoBQ,OAAO,IAAIb,UAAU;gBAC/DA,SAASQ;gBACTH,oBAAoBQ,OAAO,GAAGL,GAAGI,YAAY;YAC/C;QACF;IACF,GACA;QAACX;QAAMD;KAAS;IAGlB,MAAMc,SAASX,OAAMI,WAAW,CAAC;QAC/B,MAAMC,KAAKN,WAAWW,OAAO;QAC7B,IAAI,CAACL,IAAI;YACP,uDAAuD,GACvD;QACF;QAEAF,cAAcE;IAChB,GAAG;QAACN;QAAYI;KAAc;IAE9B,OAAO;QAACJ;QAAYY;KAAO;AAC7B"}