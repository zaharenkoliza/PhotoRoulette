{"version":3,"sources":["../../../../src/components/Alert/Alert.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon20Cancel } from '@vkontakte/icons';\nimport { classNames, hasReactNode, noop } from '@vkontakte/vkjs';\nimport { useAdaptivityWithJSMediaQueries } from '../../hooks/useAdaptivityWithJSMediaQueries';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { useCSSKeyframesAnimationController } from '../../lib/animation';\nimport { stopPropagation } from '../../lib/utils';\nimport type {\n  AlignType,\n  AnchorHTMLAttributesOnly,\n  HasDataAttribute,\n  HasRootRef,\n} from '../../types';\nimport { useScrollLock } from '../AppRoot/ScrollContext';\nimport type { ButtonProps } from '../Button/Button';\nimport { FocusTrap } from '../FocusTrap/FocusTrap';\nimport { IconButton } from '../IconButton/IconButton';\nimport { ModalDismissButton } from '../ModalDismissButton/ModalDismissButton';\nimport { PopoutWrapper } from '../PopoutWrapper/PopoutWrapper';\nimport type { AlertActionProps } from './AlertAction';\nimport { AlertActions } from './AlertActions';\nimport { AlertHeader, AlertText } from './AlertTypography';\nimport styles from './Alert.module.css';\n\ntype AlertActionMode = 'cancel' | 'destructive' | 'default';\n\nexport interface AlertActionInterface\n  extends Pick<ButtonProps, 'Component'>,\n    AnchorHTMLAttributesOnly,\n    HasDataAttribute {\n  title: string;\n  /**\n   * Обработчик клика на опцию. Если свойство `autoCloseDisabled` включено,\n   * то в аргументы `action` передаётся объект с функцией close,\n   * вызвав которую можно закрыть `action` вручную.\n   */\n  action?: (args?: { close?: VoidFunction }) => void;\n  /**\n   * По умолчанию клик на опцию вызывает переданную в `Alert` функцию `onClose`, данное свойство\n   * позволяет отключить такое поведение\n   */\n  autoCloseDisabled?: boolean;\n  mode: AlertActionMode;\n}\n\nexport interface AlertProps extends React.HTMLAttributes<HTMLElement>, HasRootRef<HTMLDivElement> {\n  actionsLayout?: 'vertical' | 'horizontal';\n  actionsAlign?: AlignType;\n  actions?: AlertActionInterface[];\n  renderAction?: (props: AlertActionProps) => React.ReactNode;\n  header?: React.ReactNode;\n  text?: React.ReactNode;\n  onClose: VoidFunction;\n  /**\n   * Текст кнопки закрытия. Делает ее доступной для ассистивных технологий\n   */\n  dismissLabel?: string;\n  /**\n   * Расположение кнопки закрытия (внутри и вне `popout'a`)\n   * Доступно только в `compact`-режиме, не отображается на `iOS`\n   */\n  dismissButtonMode?: 'inside' | 'outside';\n  /**\n   * `data-testid` для кнопки закрытия\n   */\n  dismissButtonTestId?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Alert\n */\nexport const Alert = ({\n  actions,\n  actionsLayout = 'horizontal',\n  children,\n  className,\n  style,\n  text,\n  header,\n  onClose,\n  dismissLabel = 'Закрыть предупреждение',\n  renderAction,\n  actionsAlign,\n  dismissButtonMode = 'outside',\n  dismissButtonTestId,\n  getRootRef,\n  ...restProps\n}: AlertProps): React.ReactNode => {\n  const generatedId = React.useId();\n\n  const headerId = `vkui-alert-${generatedId}-header`;\n  const textId = `vkui-alert-${generatedId}-text`;\n\n  const platform = usePlatform();\n  const { isDesktop } = useAdaptivityWithJSMediaQueries();\n\n  const [closing, setClosing] = React.useState(false);\n  const itemActionCallbackRef = React.useRef(noop);\n  const [animationState, animationHandlers] = useCSSKeyframesAnimationController(\n    closing ? 'exit' : 'enter',\n    {\n      onExited() {\n        onClose();\n        itemActionCallbackRef.current();\n        itemActionCallbackRef.current = noop;\n      },\n    },\n  );\n  const isDismissButtonVisible = isDesktop && platform !== 'ios';\n  const elementRef = React.useRef<HTMLDivElement>(null);\n\n  const close = React.useCallback(() => {\n    setClosing(true);\n  }, []);\n\n  const onItemClick = React.useCallback(\n    (item: AlertActionInterface) => {\n      const { action: itemAction, autoCloseDisabled = false } = item;\n\n      if (autoCloseDisabled) {\n        itemAction && itemAction({ close });\n      } else {\n        if (itemAction) {\n          itemActionCallbackRef.current = itemAction;\n        }\n        setClosing(true);\n      }\n    },\n    [close],\n  );\n\n  useScrollLock();\n\n  return (\n    <PopoutWrapper\n      className={className}\n      closing={closing}\n      style={style}\n      onClick={close}\n      getRootRef={getRootRef}\n    >\n      <FocusTrap\n        {...restProps}\n        {...animationHandlers}\n        getRootRef={elementRef}\n        onClick={stopPropagation}\n        onClose={close}\n        autoFocus={animationState === 'entered'}\n        className={classNames(\n          styles['Alert'],\n          platform === 'ios' && styles['Alert--ios'],\n          platform === 'vkcom' && styles['Alert--vkcom'],\n          closing ? styles['Alert--closing'] : styles['Alert--opening'],\n          isDesktop && styles['Alert--desktop'],\n        )}\n        role=\"alertdialog\"\n        aria-modal\n        aria-labelledby={headerId}\n        aria-describedby={textId}\n      >\n        <div\n          className={classNames(\n            styles['Alert__content'],\n            dismissButtonMode === 'inside' && styles['Alert__content--withButton'],\n          )}\n        >\n          {hasReactNode(header) && <AlertHeader id={headerId}>{header}</AlertHeader>}\n          {hasReactNode(text) && <AlertText id={textId}>{text}</AlertText>}\n          {children}\n          {isDismissButtonVisible && dismissButtonMode === 'inside' && (\n            <IconButton\n              label={dismissLabel}\n              className={classNames(styles['Alert__dismiss'], 'vkuiInternalAlert__dismiss')}\n              onClick={close}\n              hoverMode=\"opacity\"\n              activeMode=\"opacity\"\n              data-testid={dismissButtonTestId}\n            >\n              <Icon20Cancel />\n            </IconButton>\n          )}\n        </div>\n        <AlertActions\n          actions={actions}\n          actionsAlign={actionsAlign}\n          actionsLayout={actionsLayout}\n          renderAction={renderAction}\n          onItemClick={onItemClick}\n        />\n        {isDismissButtonVisible && dismissButtonMode === 'outside' && (\n          <ModalDismissButton onClick={close} data-testid={dismissButtonTestId}>\n            {dismissLabel}\n          </ModalDismissButton>\n        )}\n      </FocusTrap>\n    </PopoutWrapper>\n  );\n};\n"],"names":["Alert","actions","actionsLayout","children","className","style","text","header","onClose","dismissLabel","renderAction","actionsAlign","dismissButtonMode","dismissButtonTestId","getRootRef","restProps","generatedId","React","useId","headerId","textId","platform","usePlatform","isDesktop","useAdaptivityWithJSMediaQueries","closing","setClosing","useState","itemActionCallbackRef","useRef","noop","animationState","animationHandlers","useCSSKeyframesAnimationController","onExited","current","isDismissButtonVisible","elementRef","close","useCallback","onItemClick","item","action","itemAction","autoCloseDisabled","useScrollLock","PopoutWrapper","onClick","FocusTrap","stopPropagation","autoFocus","classNames","role","aria-modal","aria-labelledby","aria-describedby","div","hasReactNode","AlertHeader","id","AlertText","IconButton","label","hoverMode","activeMode","data-testid","Icon20Cancel","AlertActions","ModalDismissButton"],"mappings":";;;;+BAuEaA;;;eAAAA;;;;;;;;iEAvEU;uBACM;sBACkB;iDACC;6BACpB;2BACuB;uBACnB;+BAOF;2BAEJ;4BACC;oCACQ;+BACL;8BAED;iCACU;AAkDhC,MAAMA,QAAQ;QAAC,EACpBC,OAAO,EACPC,gBAAgB,YAAY,EAC5BC,QAAQ,EACRC,SAAS,EACTC,KAAK,EACLC,IAAI,EACJC,MAAM,EACNC,OAAO,EACPC,eAAe,wBAAwB,EACvCC,YAAY,EACZC,YAAY,EACZC,oBAAoB,SAAS,EAC7BC,mBAAmB,EACnBC,UAAU,EAEC,WADRC;QAdHd;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,MAAME,cAAcC,OAAMC,KAAK;IAE/B,MAAMC,WAAW,CAAC,WAAW,EAAEH,YAAY,OAAO,CAAC;IACnD,MAAMI,SAAS,CAAC,WAAW,EAAEJ,YAAY,KAAK,CAAC;IAE/C,MAAMK,WAAWC,IAAAA,wBAAW;IAC5B,MAAM,EAAEC,SAAS,EAAE,GAAGC,IAAAA,gEAA+B;IAErD,MAAM,CAACC,SAASC,WAAW,GAAGT,OAAMU,QAAQ,CAAC;IAC7C,MAAMC,wBAAwBX,OAAMY,MAAM,CAACC,UAAI;IAC/C,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGC,IAAAA,6CAAkC,EAC5ER,UAAU,SAAS,SACnB;QACES;YACE1B;YACAoB,sBAAsBO,OAAO;YAC7BP,sBAAsBO,OAAO,GAAGL,UAAI;QACtC;IACF;IAEF,MAAMM,yBAAyBb,aAAaF,aAAa;IACzD,MAAMgB,aAAapB,OAAMY,MAAM,CAAiB;IAEhD,MAAMS,QAAQrB,OAAMsB,WAAW,CAAC;QAC9Bb,WAAW;IACb,GAAG,EAAE;IAEL,MAAMc,cAAcvB,OAAMsB,WAAW,CACnC,CAACE;QACC,MAAM,EAAEC,QAAQC,UAAU,EAAEC,oBAAoB,KAAK,EAAE,GAAGH;QAE1D,IAAIG,mBAAmB;YACrBD,cAAcA,WAAW;gBAAEL;YAAM;QACnC,OAAO;YACL,IAAIK,YAAY;gBACdf,sBAAsBO,OAAO,GAAGQ;YAClC;YACAjB,WAAW;QACb;IACF,GACA;QAACY;KAAM;IAGTO,IAAAA,4BAAa;IAEb,qBACE,qBAACC,4BAAa;QACZ1C,WAAWA;QACXqB,SAASA;QACTpB,OAAOA;QACP0C,SAAST;QACTxB,YAAYA;kBAEZ,cAAA,sBAACkC,oBAAS,8CACJjC,WACAiB;YACJlB,YAAYuB;YACZU,SAASE,sBAAe;YACxBzC,SAAS8B;YACTY,WAAWnB,mBAAmB;YAC9B3B,WAAW+C,IAAAA,gBAAU,eAEnB9B,aAAa,2BACbA,aAAa,+BACbI,uDACAF;YAEF6B,MAAK;YACLC,YAAU;YACVC,mBAAiBnC;YACjBoC,oBAAkBnC;;8BAElB,sBAACoC;oBACCpD,WAAW+C,IAAAA,gBAAU,wBAEnBvC,sBAAsB;;wBAGvB6C,IAAAA,kBAAY,EAAClD,yBAAW,qBAACmD,4BAAW;4BAACC,IAAIxC;sCAAWZ;;wBACpDkD,IAAAA,kBAAY,EAACnD,uBAAS,qBAACsD,0BAAS;4BAACD,IAAIvC;sCAASd;;wBAC9CH;wBACAiC,0BAA0BxB,sBAAsB,0BAC/C,qBAACiD,sBAAU;4BACTC,OAAOrD;4BACPL,WAAW+C,IAAAA,gBAAU,wBAA2B;4BAChDJ,SAAST;4BACTyB,WAAU;4BACVC,YAAW;4BACXC,eAAapD;sCAEb,cAAA,qBAACqD,mBAAY;;;;8BAInB,qBAACC,0BAAY;oBACXlE,SAASA;oBACTU,cAAcA;oBACdT,eAAeA;oBACfQ,cAAcA;oBACd8B,aAAaA;;gBAEdJ,0BAA0BxB,sBAAsB,2BAC/C,qBAACwD,sCAAkB;oBAACrB,SAAST;oBAAO2B,eAAapD;8BAC9CJ;;;;;AAMb"}