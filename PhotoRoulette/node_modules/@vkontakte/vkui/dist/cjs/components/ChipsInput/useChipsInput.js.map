{"version":3,"sources":["../../../../src/components/ChipsInput/useChipsInput.ts"],"sourcesContent":["import * as React from 'react';\nimport { useCustomEnsuredControl, useEnsuredControl } from '../../hooks/useEnsuredControl';\nimport { useNativeFormResetListener } from '../../hooks/useNativeFormResetListener';\nimport { simulateReactInput, type SimulateReactInputTargetState } from '../../lib/react';\nimport {\n  DEFAULT_INPUT_VALUE,\n  DEFAULT_VALUE,\n  getNewOptionDataDefault,\n  getOptionLabelDefault,\n  getOptionValueDefault,\n} from '../ChipsInputBase/constants';\nimport { isValueLikeChipOptionObject } from '../ChipsInputBase/helpers';\nimport type {\n  ChipOption,\n  ChipOptionLabel,\n  ChipOptionValue,\n  GetNewOptionData,\n  GetOptionLabel,\n  GetOptionValue,\n  UseChipsInputBaseProps,\n} from '../ChipsInputBase/types';\n\nexport const transformValue = <O extends ChipOption>(\n  value: O[],\n  getOptionValue: GetOptionValue<O>,\n  getOptionLabel: GetOptionLabel<O>,\n): Array<\n  O & {\n    label: ChipOptionLabel;\n    value: ChipOptionValue;\n  }\n> =>\n  value.map((option) => ({\n    ...option,\n    label: getOptionLabel(option),\n    value: getOptionValue(option),\n  }));\n\ninterface ToggleOption<O extends ChipOption> {\n  (optionForAdd: O | string, isNewValue: true): void;\n  (optionForRemove: O | ChipOptionValue, isNewValue: false): void;\n}\n\nexport interface UseChipsInputProps<O extends ChipOption = ChipOption>\n  extends UseChipsInputBaseProps<O> {\n  /**\n   * Селектор значения.\n   */\n  getOptionValue?: GetOptionValue<O>;\n  /**\n   * Селектор пользовательского представления.\n   */\n  getOptionLabel?: GetOptionLabel<O>;\n  /**\n   * Функция для создания новой опции.\n   */\n  getNewOptionData?: GetNewOptionData<O>;\n}\n\nexport const useChipsInput = <O extends ChipOption>({\n  // option\n  value: valueProp,\n  defaultValue = DEFAULT_VALUE,\n  onChange,\n  getOptionLabel = getOptionLabelDefault,\n  getOptionValue = getOptionValueDefault,\n  getNewOptionData = getNewOptionDataDefault,\n\n  // input\n  inputValue: inputValueProp,\n  defaultInputValue = DEFAULT_INPUT_VALUE,\n  onInputChange,\n\n  // other\n  disabled,\n}: UseChipsInputProps<O>): {\n  value: Array<\n    O & {\n      label: ChipOptionLabel;\n      value: ChipOptionValue;\n    }\n  >;\n  addOption: (newValue: O | string) => void;\n  addOptionFromInput: (inputValue: string) => void;\n  removeOption: (newValue: O | ChipOptionValue) => void;\n  clearOptions: () => void;\n  inputRef: React.RefObject<HTMLInputElement & SimulateReactInputTargetState>;\n  inputValue: string;\n  onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => any;\n  clearInput: () => void;\n} => {\n  const [value, setValue] = useCustomEnsuredControl({\n    disabled,\n    value: valueProp ? transformValue(valueProp, getOptionValue, getOptionLabel) : undefined,\n    defaultValue: transformValue(defaultValue, getOptionValue, getOptionLabel),\n    onChange,\n  });\n\n  const inputRef = React.useRef<HTMLInputElement & SimulateReactInputTargetState>(null);\n  const [inputValue, setInputChange] = useEnsuredControl({\n    disabled,\n    value: inputValueProp,\n    defaultValue: defaultInputValue,\n    onChange: onInputChange,\n  });\n\n  const toggleOption: ToggleOption<O> = React.useCallback(\n    (nextValueProp: O | ChipOptionValue, isNewValue: boolean) => {\n      setValue((prevValue) => {\n        const isLikeObjectOption = isValueLikeChipOptionObject(nextValueProp);\n        const resolvedOption = isLikeObjectOption\n          ? getNewOptionData(nextValueProp.value, nextValueProp.label)\n          : getNewOptionData(nextValueProp, typeof nextValueProp === 'string' ? nextValueProp : '');\n        const nextValue = prevValue.filter((option: O) => resolvedOption.value !== option.value);\n\n        if (isNewValue === true) {\n          nextValue.push(\n            isLikeObjectOption ? { ...nextValueProp, ...resolvedOption } : resolvedOption,\n          );\n        }\n\n        return nextValue;\n      });\n    },\n    [setValue, getNewOptionData],\n  );\n\n  const clearInput = React.useCallback(() => {\n    /* istanbul ignore if */\n    if (!inputRef.current) {\n      return;\n    }\n    simulateReactInput(inputRef.current, '');\n  }, [inputRef]);\n\n  const addOption = React.useCallback(\n    (newValue: O | string) => toggleOption(newValue, true),\n    [toggleOption],\n  );\n\n  const removeOption = React.useCallback(\n    (newValue: O | ChipOptionValue) => toggleOption(newValue, false),\n    [toggleOption],\n  );\n\n  const addOptionFromInput = React.useCallback(\n    (inputValue: string) => {\n      const label = inputValue.trim();\n      if (label) {\n        addOption(label);\n        clearInput();\n      }\n    },\n    [addOption, clearInput],\n  );\n\n  const reset = React.useCallback(() => {\n    setValue(defaultValue);\n  }, [defaultValue, setValue]);\n\n  const clearOptions = React.useCallback(() => {\n    setValue(DEFAULT_VALUE);\n    clearInput();\n  }, [clearInput, setValue]);\n\n  useNativeFormResetListener(inputRef, reset);\n\n  return {\n    value,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n\n    inputRef,\n    inputValue,\n    onInputChange: setInputChange,\n    clearInput,\n    clearOptions,\n  };\n};\n"],"names":["transformValue","useChipsInput","value","getOptionValue","getOptionLabel","map","option","label","valueProp","defaultValue","DEFAULT_VALUE","onChange","getOptionLabelDefault","getOptionValueDefault","getNewOptionData","getNewOptionDataDefault","inputValue","inputValueProp","defaultInputValue","DEFAULT_INPUT_VALUE","onInputChange","disabled","setValue","useCustomEnsuredControl","undefined","inputRef","React","useRef","setInputChange","useEnsuredControl","toggleOption","useCallback","nextValueProp","isNewValue","prevValue","isLikeObjectOption","isValueLikeChipOptionObject","resolvedOption","nextValue","filter","push","clearInput","current","simulateReactInput","addOption","newValue","removeOption","addOptionFromInput","trim","reset","clearOptions","useNativeFormResetListener"],"mappings":";;;;;;;;;;;IAsBaA,cAAc;eAAdA;;IAqCAC,aAAa;eAAbA;;;;;;iEA3DU;mCACoC;4CAChB;wBAC4B;2BAOhE;yBACqC;AAWrC,MAAMD,iBAAiB,CAC5BE,OACAC,gBACAC,iBAOAF,MAAMG,GAAG,CAAC,CAACC,SAAY,4CAClBA;YACHC,OAAOH,eAAeE;YACtBJ,OAAOC,eAAeG;;AAwBnB,MAAML,gBAAgB,CAAuB,EAClD,SAAS;AACTC,OAAOM,SAAS,EAChBC,eAAeC,wBAAa,EAC5BC,QAAQ,EACRP,iBAAiBQ,gCAAqB,EACtCT,iBAAiBU,gCAAqB,EACtCC,mBAAmBC,kCAAuB,EAE1C,QAAQ;AACRC,YAAYC,cAAc,EAC1BC,oBAAoBC,8BAAmB,EACvCC,aAAa,EAEb,QAAQ;AACRC,QAAQ,EACc;IAgBtB,MAAM,CAACnB,OAAOoB,SAAS,GAAGC,IAAAA,0CAAuB,EAAC;QAChDF;QACAnB,OAAOM,YAAYR,eAAeQ,WAAWL,gBAAgBC,kBAAkBoB;QAC/Ef,cAAcT,eAAeS,cAAcN,gBAAgBC;QAC3DO;IACF;IAEA,MAAMc,WAAWC,OAAMC,MAAM,CAAmD;IAChF,MAAM,CAACX,YAAYY,eAAe,GAAGC,IAAAA,oCAAiB,EAAC;QACrDR;QACAnB,OAAOe;QACPR,cAAcS;QACdP,UAAUS;IACZ;IAEA,MAAMU,eAAgCJ,OAAMK,WAAW,CACrD,CAACC,eAAoCC;QACnCX,SAAS,CAACY;YACR,MAAMC,qBAAqBC,IAAAA,oCAA2B,EAACJ;YACvD,MAAMK,iBAAiBF,qBACnBrB,iBAAiBkB,cAAc9B,KAAK,EAAE8B,cAAczB,KAAK,IACzDO,iBAAiBkB,eAAe,OAAOA,kBAAkB,WAAWA,gBAAgB;YACxF,MAAMM,YAAYJ,UAAUK,MAAM,CAAC,CAACjC,SAAc+B,eAAenC,KAAK,KAAKI,OAAOJ,KAAK;YAEvF,IAAI+B,eAAe,MAAM;gBACvBK,UAAUE,IAAI,CACZL,qBAAqB,qBAAKH,eAAkBK,kBAAmBA;YAEnE;YAEA,OAAOC;QACT;IACF,GACA;QAAChB;QAAUR;KAAiB;IAG9B,MAAM2B,aAAaf,OAAMK,WAAW,CAAC;QACnC,sBAAsB,GACtB,IAAI,CAACN,SAASiB,OAAO,EAAE;YACrB;QACF;QACAC,IAAAA,0BAAkB,EAAClB,SAASiB,OAAO,EAAE;IACvC,GAAG;QAACjB;KAAS;IAEb,MAAMmB,YAAYlB,OAAMK,WAAW,CACjC,CAACc,WAAyBf,aAAae,UAAU,OACjD;QAACf;KAAa;IAGhB,MAAMgB,eAAepB,OAAMK,WAAW,CACpC,CAACc,WAAkCf,aAAae,UAAU,QAC1D;QAACf;KAAa;IAGhB,MAAMiB,qBAAqBrB,OAAMK,WAAW,CAC1C,CAACf;QACC,MAAMT,QAAQS,WAAWgC,IAAI;QAC7B,IAAIzC,OAAO;YACTqC,UAAUrC;YACVkC;QACF;IACF,GACA;QAACG;QAAWH;KAAW;IAGzB,MAAMQ,QAAQvB,OAAMK,WAAW,CAAC;QAC9BT,SAASb;IACX,GAAG;QAACA;QAAca;KAAS;IAE3B,MAAM4B,eAAexB,OAAMK,WAAW,CAAC;QACrCT,SAASZ,wBAAa;QACtB+B;IACF,GAAG;QAACA;QAAYnB;KAAS;IAEzB6B,IAAAA,sDAA0B,EAAC1B,UAAUwB;IAErC,OAAO;QACL/C;QACA0C;QACAG;QACAD;QAEArB;QACAT;QACAI,eAAeQ;QACfa;QACAS;IACF;AACF"}