import { useContext, useEffect, useState } from 'react';
import { ContextThrottleService } from '../services/ContextThrottleService';
import { EventBus } from '../services/EventBus';
export function useThrottledContext(context) {
    const contextValue = useContext(context);
    const contextName = context.displayName;
    const [prevValue, setPrevValue] = useState(contextValue);
    const [throttledValue, setThrottledValue] = useState(contextValue);
    if (!contextName) {
        console.error('No context display name found');
        return [contextValue, null];
    }
    useEffect(() => {
        const unsubscribe = EventBus.subscribe(contextName, (throttleValue, prevValue) => {
            setThrottledValue(throttleValue);
            setPrevValue(prevValue);
        });
        return () => unsubscribe();
    }, []);
    useEffect(() => {
        ContextThrottleService.triggerContextUpdate(contextName, contextValue);
    }, [contextValue, contextName]);
    return [throttledValue, prevValue];
}
//# sourceMappingURL=useThrottledContext.js.map