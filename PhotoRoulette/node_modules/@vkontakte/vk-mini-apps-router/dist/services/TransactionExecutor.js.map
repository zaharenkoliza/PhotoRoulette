{"version":3,"file":"TransactionExecutor.js","sourceRoot":"","sources":["../../src/services/TransactionExecutor.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,mBAAmB;IAI9B,gEAAgE;IAChE;QAHQ,iBAAY,GAA4B,EAAE,CAAC;IAG5B,CAAC;IAEjB,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE;YACjC,mBAAmB,CAAC,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;SAC1D;QAED,OAAO,mBAAmB,CAAC,QAAQ,CAAC;IACtC,CAAC;IAEM,MAAM,KAAK,eAAe;QAC/B,MAAM,mBAAmB,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC;QAC9D,MAAM,uBAAuB,GAAG,mBAAmB,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;QAC5E,MAAM,+BAA+B,GACnC,mBAAmB,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC;YAC7C,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;QAEpD,OAAO,uBAAuB,IAAI,+BAA+B,CAAC;IACpE,CAAC;IAEM,MAAM,CAAC,GAAG,CAAC,WAAkC;QAClD,MAAM,mBAAmB,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC;QAC9D,mBAAmB,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAEM,MAAM,CAAC,iBAAiB;QAC7B,MAAM,mBAAmB,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC;QAC9D,mBAAmB,CAAC,YAAY,GAAG,EAAE,CAAC;IACxC,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,MAAM;QACxB,MAAM,mBAAmB,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC;QAC9D,MAAM,YAAY,GAAG,mBAAmB,CAAC,YAAY,CAAC;QACtD,gGAAgG;QAChG,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,YAAY,CAAC,MAAM,EAAE;gBACvB,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;gBACzB,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC5B,YAAY,CAAC,KAAK,EAAE,CAAC;iBACtB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { NavigationTransaction } from '../entities/NavigationTransaction';\n\nexport class TransactionExecutor {\n  private static instance?: TransactionExecutor;\n  private transactions: NavigationTransaction[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public static getInstance() {\n    if (!TransactionExecutor.instance) {\n      TransactionExecutor.instance = new TransactionExecutor();\n    }\n\n    return TransactionExecutor.instance;\n  }\n\n  public static get isRunSyncActive() {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    const hasMultipleTransactions = transactionExecutor.transactions.length > 1;\n    const hasSingleMultiActionTransaction =\n      transactionExecutor.transactions.length === 1 &&\n      transactionExecutor.transactions[0].isMultiAction;\n\n    return hasMultipleTransactions || hasSingleMultiActionTransaction;\n  }\n\n  public static add(transaction: NavigationTransaction) {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    transactionExecutor.transactions.push(transaction);\n  }\n\n  public static resetTransactions() {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    transactionExecutor.transactions = [];\n  }\n\n  public static async doNext(): Promise<void> {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    const transactions = transactionExecutor.transactions;\n    // Нужно делать асинхронно, иначе будет бесконечный цикл навигация-изменение стейта-навигация...\n    setTimeout(() => {\n      if (transactions.length) {\n        transactions[0].doNext();\n        if (transactions[0].finished) {\n          transactions.shift();\n        }\n      }\n    });\n  }\n}\n"]}