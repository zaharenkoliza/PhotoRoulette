{"version":3,"sources":["../../src/datetime/date.ts"],"sourcesContent":["import { leadingZero } from '../other/numbers';\nimport { isDateToday } from './isDateToday';\n\nexport const SECONDS_IN_THE_DAY = 86400;\nconst MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n\n/**\n * Проверяет, что переданная дата - вчерашний день\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isDateYesterday } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isDateYesterday(new Date(), false);\n * ```\n */\nexport function isDateYesterday(date: Date): boolean {\n  const yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n\n/**\n * Проверяет, что переданная дата - завтрашний день\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isDateTomorrow } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isDateTomorrow(new Date(), false);\n * ```\n */\nexport function isDateTomorrow(date: Date): boolean {\n  const tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n\n/**\n * Возвращает новую дату — начало переданного дня\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getBeginningOfDay } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   getBeginningOfDay(new Date(2024, 0, 1, 12, 34, 56, 789)),\n *   new Date(2024, 0, 1),\n * );\n * ```\n *\n * @param date Дата\n */\nexport function getBeginningOfDay(date: Date) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\n\n/**\n * Возвращает true, если год високосный\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { isLeapYear } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(isLeapYear(2024), true);\n * assert.strictEqual(isLeapYear(2025), false);\n * ```\n *\n * @param year Год\n */\nexport function isLeapYear(year: number) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getLastDayOfMonth } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(getLastDayOfMonth(2024, 2), 29);\n * assert.strictEqual(getLastDayOfMonth(2025, 2), 28);\n * ```\n *\n * @param year Год\n * @param month Месяц\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && ((month < 8 && month % 2 === 0) || (month > 7 && month % 2 === 1))) {\n    return 30;\n  }\n  return 31;\n}\n\n/**\n * Ближайший понедельник в прошлом относительно date\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getStartOfWeek } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   getStartOfWeek(new Date(2024, 0, 1), 10),\n *   new Date(2024, 11, 31),\n * );\n * ```\n *\n * @param date Дата\n */\nexport function getStartOfWeek(date: Date): Date {\n  const weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n\n/**\n * Добавляет дни к дате и возвращает новый объект\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { addDays } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   addDays(new Date(2024, 0, 1), 10),\n *   new Date(2024, 0, 11),\n * );\n * ```\n *\n * @param date Дата\n * @param dayCount Количество дней, которые требуется добавить\n */\nexport function addDays(date: Date, dayCount: number): Date {\n  const modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n\n/**\n * Создаёт дату из Unix Timestamp\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createDateFromUnixTimestamp } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   createDateFromUnixTimestamp(1704056400),\n *   new Date(2024, 0, 1),\n * );\n * ```\n *\n * @param timestamp Дата в формате unix timestamp (секунды)\n */\nexport function createDateFromUnixTimestamp(timestamp: number): Date {\n  return new Date(timestamp * 1000);\n}\n\n/**\n * Возвращает Unix Timestamp из даты\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { getUnixTimestampFromDate } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(\n *   getUnixTimestampFromDate(new Date(2024, 0, 1)),\n *   1704056400,\n * );\n * ```\n *\n * @param date Дата, которую требуется перевести в Unix Timestamp\n */\nexport function getUnixTimestampFromDate(date: Date): number {\n  return Math.floor(date.getTime() / 1000);\n}\n\n/**\n * Возвращает дату в формате YYYY-MM-DD\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { convertDateToInputFormat } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(\n *   convertDateToInputFormat(new Date(2024, 0, 1)),\n *   \"2024-01-01\",\n * );\n * ```\n *\n * @param date Дата, которую требуется отформатировать\n */\nexport function convertDateToInputFormat(date: Date): string {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}\n"],"names":["SECONDS_IN_THE_DAY","addDays","convertDateToInputFormat","createDateFromUnixTimestamp","getBeginningOfDay","getLastDayOfMonth","getStartOfWeek","getUnixTimestampFromDate","isDateTomorrow","isDateYesterday","isLeapYear","MILLISECONDS_IN_THE_DAY","date","yesterdayDate","Date","getTime","isDateToday","tomorrowDate","year","getFullYear","month","getMonth","day","getDate","weekDay","getDay","dayCount","modified","setDate","timestamp","Math","floor","leadingZero","join"],"mappings":";;;;;;;;;;;IAGaA,kBAAkB;eAAlBA;;IA8IGC,OAAO;eAAPA;;IA8DAC,wBAAwB;eAAxBA;;IAxCAC,2BAA2B;eAA3BA;;IAjHAC,iBAAiB;eAAjBA;;IAyCAC,iBAAiB;eAAjBA;;IAyBAC,cAAc;eAAdA;;IAmEAC,wBAAwB;eAAxBA;;IA1JAC,cAAc;eAAdA;;IAhBAC,eAAe;eAAfA;;IA2DAC,UAAU;eAAVA;;;uBA5EY;2BACA;AAErB,IAAMV,qBAAqB;AAClC,IAAMW,0BAA0BX,qBAAqB;AAErD;;;;;;;;;;CAUC,GACM,SAASS,gBAAgBG,IAAU;IACxC,IAAMC,gBAAgB,IAAIC,KAAKF,KAAKG,OAAO,KAAKJ;IAChD,OAAOK,IAAAA,wBAAW,EAACH;AACrB;AAEA;;;;;;;;;;CAUC,GACM,SAASL,eAAeI,IAAU;IACvC,IAAMK,eAAe,IAAIH,KAAKF,KAAKG,OAAO,KAAKJ;IAC/C,OAAOK,IAAAA,wBAAW,EAACC;AACrB;AAEA;;;;;;;;;;;;;;;CAeC,GACM,SAASb,kBAAkBQ,IAAU;IAC1C,IAAMM,OAAON,KAAKO,WAAW;IAC7B,IAAMC,QAAQR,KAAKS,QAAQ;IAC3B,IAAMC,MAAMV,KAAKW,OAAO;IAExB,OAAO,IAAIT,KAAKI,MAAME,OAAOE,KAAK,GAAG,GAAG,GAAG;AAC7C;AAEA;;;;;;;;;;;;;CAaC,GACM,SAASZ,WAAWQ,IAAY;IACrC,OAAO,AAACA,OAAO,MAAM,KAAKA,OAAO,QAAQ,KAAMA,OAAO,QAAQ;AAChE;AAEA;;;;;;;;;;;;;;CAcC,GACM,SAASb,kBAAkBa,IAAY,EAAEE,KAAa;IAC3D,IAAI,CAACA,UAAU,GAAG;QAChB,OAAOV,WAAWQ,QAAQ,KAAK;IACjC,OAAO,IAAIE,QAAQ,KAAM,CAAA,AAACA,QAAQ,KAAKA,QAAQ,MAAM,KAAOA,QAAQ,KAAKA,QAAQ,MAAM,CAAC,GAAI;QAC1F,OAAO;IACT;IACA,OAAO;AACT;AAEA;;;;;;;;;;;;;;;CAeC,GACM,SAASd,eAAeM,IAAU;IACvC,IAAMY,UAAUZ,KAAKa,MAAM;IAC3B,IAAID,YAAY,GAAG;QACjB,OAAOvB,QAAQW,MAAM,CAAC;IACxB;IACA,OAAOX,QAAQW,MAAM,CAACY,UAAU;AAClC;AAEA;;;;;;;;;;;;;;;;CAgBC,GACM,SAASvB,QAAQW,IAAU,EAAEc,QAAgB;IAClD,IAAMC,WAAW,IAAIb,KAAKF,KAAKG,OAAO;IACtCY,SAASC,OAAO,CAACD,SAASJ,OAAO,KAAKG;IACtC,OAAOC;AACT;AAEA;;;;;;;;;;;;;;;CAeC,GACM,SAASxB,4BAA4B0B,SAAiB;IAC3D,OAAO,IAAIf,KAAKe,YAAY;AAC9B;AAEA;;;;;;;;;;;;;;;CAeC,GACM,SAAStB,yBAAyBK,IAAU;IACjD,OAAOkB,KAAKC,KAAK,CAACnB,KAAKG,OAAO,KAAK;AACrC;AAEA;;;;;;;;;;;;;;;CAeC,GACM,SAASb,yBAAyBU,IAAU;IACjD,IAAMU,MAAMV,KAAKW,OAAO;IACxB,IAAMH,QAAQR,KAAKS,QAAQ,KAAK;IAChC,IAAMH,OAAON,KAAKO,WAAW;IAE7B,OAAO;QAACD;QAAMc,IAAAA,oBAAW,EAACZ;QAAQY,IAAAA,oBAAW,EAACV;KAAK,CAACW,IAAI,CAAC;AAC3D"}