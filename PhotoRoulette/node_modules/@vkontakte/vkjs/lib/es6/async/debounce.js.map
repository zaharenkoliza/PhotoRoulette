{"version":3,"sources":["../../../src/async/debounce.ts"],"sourcesContent":["/**\n * Функция debounced, которая будет задержана на заданное `delay` время\n * в миллисекундах. Если метод будет вызван снова до истечения тайм-аута,\n * предыдущий вызов будет прерван.\n */\nexport interface DebouncedFunction<T extends unknown[]> {\n  (...a: T): void;\n\n  /**\n   * Отменяет вызов функции\n   */\n  cancel(): void;\n}\n\n/**\n * Возвращает debounced функцию, которая задерживает вызов `fn` на заданное\n * `delay` время в миллисекундах. Если метод вызывается снова до истечения\n * тайм-аута, предыдущий вызов будет прерван.\n *\n * @param fn Функция которую надо \"отложить\"\n * @param delay Время задержки вызова в миллисекундах\n * @param context Контекст с которым будет совершен вызов функции\n */\nexport function debounce<T extends any[]>(\n  fn: (...args: T) => unknown,\n  delay: number,\n  context = typeof window !== 'undefined' ? window : undefined,\n): DebouncedFunction<T> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  let args: T;\n\n  const later = () => fn.apply(context, args);\n  const debouncedFn = (...a: T) => {\n    args = a;\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(later, delay);\n  };\n\n  debouncedFn.cancel = () => {\n    clearTimeout(timeoutId);\n  };\n\n  return debouncedFn;\n}\n"],"names":["debounce","fn","delay","context","window","undefined","timeoutId","args","later","apply","debouncedFn","a","clearTimeout","setTimeout","cancel"],"mappings":"AAAA;;;;CAIC,GAIC;;GAEC,GAIH;;;;;;;;CAQC,GACD,OAAO,SAASA,SACdC,EAA2B,EAC3BC,KAAa;QACbC,UAAAA,iEAAU,OAAOC,WAAW,cAAcA,SAASC;IAEnD,IAAIC;IACJ,IAAIC;IAEJ,IAAMC,QAAQ;eAAMP,GAAGQ,KAAK,CAACN,SAASI;;IACtC,IAAMG,cAAc;yCAAIC;YAAAA;;QACtBJ,OAAOI;QACPC,aAAaN;QACbA,YAAYO,WAAWL,OAAON;IAChC;IAEAQ,YAAYI,MAAM,GAAG;QACnBF,aAAaN;IACf;IAEA,OAAOI;AACT"}